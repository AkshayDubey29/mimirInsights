name: Build and Push Multi-Architecture Docker Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cmd/**'
      - 'pkg/**'
      - 'web-ui/**'
      - 'Dockerfile.*'
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cmd/**'
      - 'pkg/**'
      - 'web-ui/**'
      - 'Dockerfile.*'
      - 'go.mod'
      - 'go.sum'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: akshaydubey29/mimir-insights-frontend
  IMAGE_NAME_BACKEND: akshaydubey29/mimir-insights-backend
  BUILD_DATE: ${{ github.event.head_commit.timestamp || github.event.schedule || format('{0:yyyy-MM-ddTHH:mm:ssZ}', github.event.created_at) }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate timestamp tag
      id: timestamp
      run: |
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "Generated timestamp: $TIMESTAMP"

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json

    - name: Build React application
      run: |
        cd web-ui
        npm ci --prefer-offline --no-audit --no-fund
        DISABLE_ESLINT_PLUGIN=true \
        GENERATE_SOURCEMAP=false \
        SKIP_PREFLIGHT_CHECK=true \
        REACT_APP_ENABLE_MOCK_DATA=false \
        REACT_APP_ENABLE_MONITORING=false \
        REACT_APP_ENABLE_LLM=false \
        REACT_APP_API_BASE_URL=/api \
        npm run build
        cd ..

    - name: Setup Go for backend build
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Build backend binary
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
        -a -installsuffix cgo \
        -ldflags="-w -s -X main.Version=${{ steps.timestamp.outputs.timestamp }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" \
        -o backend-amd64 ./cmd/server
        
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
        -a -installsuffix cgo \
        -ldflags="-w -s -X main.Version=${{ steps.timestamp.outputs.timestamp }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" \
        -o backend-arm64 ./cmd/server

    - name: Create backend Dockerfile
      run: |
        cat > Dockerfile.backend.ci << 'EOF'
        FROM --platform=$BUILDPLATFORM golang:1.21-alpine AS builder
        RUN apk add --no-cache git ca-certificates tzdata
        WORKDIR /app
        COPY go.mod go.sum ./
        RUN go mod download && go mod tidy
        COPY . .
        ARG TARGETPLATFORM
        ARG BUILDPLATFORM
        ARG TARGETOS
        ARG TARGETARCH
        RUN echo "Building for $TARGETOS/$TARGETARCH" && \
            CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH go build \
            -a -installsuffix cgo \
            -ldflags="-w -s -X main.Version=${{ steps.timestamp.outputs.timestamp }} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" \
            -o main ./cmd/server
        
        FROM alpine:3.19
        RUN apk --no-cache add ca-certificates tzdata curl
        RUN addgroup -g 1000 -S appgroup && \
            adduser -u 1001 -S appuser -G appgroup
        WORKDIR /app
        COPY --from=builder /app/main .
        COPY --from=builder /app/config ./config
        RUN chown -R appuser:appgroup /app
        USER appuser
        EXPOSE 8080
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:8080/api/health || exit 1
        CMD ["./main"]
        EOF

    - name: Build and push backend multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.backend.ci
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.timestamp.outputs.timestamp }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        labels: |
          org.opencontainers.image.title=MimirInsights Backend
          org.opencontainers.image.description=MimirInsights Backend component
          org.opencontainers.image.vendor=GitHub
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ env.BUILD_DATE }}
          org.opencontainers.image.version=${{ steps.timestamp.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ env.BUILD_DATE }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.timestamp.outputs.timestamp }}

    - name: Create frontend Dockerfile
      run: |
        cat > Dockerfile.frontend.ci << 'EOF'
        FROM nginx:alpine
        ENV PRODUCTION_TAG=${{ steps.timestamp.outputs.timestamp }}
        ENV BUILD_DATE=${{ env.BUILD_DATE }}
        ENV VCS_REF=${{ github.sha }}
        COPY web-ui/build /usr/share/nginx/html
        COPY web-ui/nginx.conf /etc/nginx/conf.d/default.conf
        RUN mkdir -p /usr/share/nginx/html/config && \
            echo 'window.CONFIG = {' > /usr/share/nginx/html/config/config.js && \
            echo '  apiBaseUrl: "http://mimir-insights-backend:8080/api",' >> /usr/share/nginx/html/config/config.js && \
            echo '  version: "PRODUCTION-${{ steps.timestamp.outputs.timestamp }}",' >> /usr/share/nginx/html/config/config.js && \
            echo '  buildDate: "${{ env.BUILD_DATE }}",' >> /usr/share/nginx/html/config/config.js && \
            echo '  gitCommit: "${{ github.sha }}"' >> /usr/share/nginx/html/config/config.js && \
            echo '};' >> /usr/share/nginx/html/config/config.js && \
            chmod 755 /usr/share/nginx/html/config
        RUN echo '#!/bin/sh' > /start.sh && \
            echo 'set -e' >> /start.sh && \
            echo '' >> /start.sh && \
            echo 'echo "üöÄ Starting MimirInsights Frontend..."' >> /start.sh && \
            echo 'echo "üõ† Version: PRODUCTION-${{ steps.timestamp.outputs.timestamp }}"' >> /start.sh && \
            echo 'echo "üèó Architecture: $(uname -m)"' >> /start.sh && \
            echo 'echo "‚úÖ Using web-ui/nginx.conf with API proxy support"' >> /start.sh && \
            echo '' >> /start.sh && \
            echo 'nginx -t' >> /start.sh && \
            echo '' >> /start.sh && \
            echo 'exec nginx -g "daemon off;"' >> /start.sh && \
            chmod +x /start.sh
        EXPOSE 80
        ENTRYPOINT ["/start.sh"]
        EOF

    - name: Build and push frontend multi-arch image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.frontend.ci
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.timestamp.outputs.timestamp }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        labels: |
          org.opencontainers.image.title=MimirInsights Frontend
          org.opencontainers.image.description=MimirInsights Frontend component
          org.opencontainers.image.vendor=GitHub
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ env.BUILD_DATE }}
          org.opencontainers.image.version=${{ steps.timestamp.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ env.BUILD_DATE }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.timestamp.outputs.timestamp }}

    - name: Output build summary
      if: github.event_name != 'pull_request'
      run: |
        echo "‚úÖ Successfully built and pushed multi-architecture images"
        echo "üì¶ Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.timestamp.outputs.timestamp }}"
        echo "üì¶ Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.timestamp.outputs.timestamp }}"
        echo "üè∑Ô∏è  Timestamp: ${{ steps.timestamp.outputs.timestamp }}"
        echo "üìÖ Build Date: ${{ env.BUILD_DATE }}"
        echo ""
        echo "üéâ CI/CD Pipeline Complete!"
        echo "üìã Manual Deployment Steps:"
        echo "1. Update values-production-final.yaml with timestamp: ${{ steps.timestamp.outputs.timestamp }}"
        echo "2. Deploy to local kind cluster using Helm"
        echo ""
        echo "üìù Commands to run locally:"
        echo "./update-values.sh ${{ steps.timestamp.outputs.timestamp }}"
        echo "helm upgrade --install mimir-insights ./deployments/helm-chart \\"
        echo "  --namespace mimir-insights \\"
        echo "  --values ./deployments/helm-chart/values-production-final.yaml \\"
        echo "  --wait"

 