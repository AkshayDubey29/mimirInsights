name: CI/CD Pipeline

on:
  push:
    branches:  main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version:1.21  
    - name: Run tests
      run: |
        go test -v ./...
    
    - name: Run linting
      run: |
        go vet ./...
        golangci-lint run

  build-backend:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${[object Object] env.REGISTRY }}/${[object Object]env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${[object Object] env.REGISTRY }}/${[object Object]env.IMAGE_NAME }}-ui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == refs/heads/main   
    steps:
    - uses: actions/checkout@v4  
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0 - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name mimir-cluster --region us-west-2   
    - name: Deploy to Kubernetes
      run: |
        helm upgrade --install mimir-insights ./deployments/helm-chart \
          --namespace mimir-insights \
          --create-namespace \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.tag=${{ github.sha }} \
          --wait \
          --timeout=10m

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${[object Object] env.REGISTRY }}/${[object Object]env.IMAGE_NAME }}-backend:latest
        format: 'sarif'
        output: trivy-results.sarif    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3     if: always()
      with:
        sarif_file: trivy-results.sarif' 