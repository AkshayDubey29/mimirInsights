# Production Helm Values for MimirInsights - AWS ALB Configuration
# Configured for AWS Application Load Balancer with proper annotations

global:
  namespace: mimir-insights
  imageRegistry: ghcr.io/akshaydubey29

backend:
  enabled: true
  image:
    repository: mimir-insights-backend
    tag: "v1.0.0-20250718-110355"
    pullPolicy: Always
  replicaCount: 2
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  env:
    LOG_LEVEL: "info"
    DISCOVERY_INTERVAL: "300"
    METRICS_ENABLED: "false"
    LLM_ENABLED: "false"
  service:
    type: ClusterIP
    port: 8080
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

frontend:
  enabled: true
  image:
    repository: mimir-insights-frontend
    tag: "v1.0.0-20250718-110355"
    pullPolicy: Always
  replicaCount: 2
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  env:
    REACT_APP_API_BASE_URL: "/api"
    REACT_APP_ENABLE_MOCK_DATA: "false"
    REACT_APP_ENABLE_MONITORING: "false"
    REACT_APP_ENABLE_LLM: "false"
  service:
    type: ClusterIP
    port: 80
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# AWS ALB Ingress Configuration
ingress:
  enabled: true
  className: alb
  annotations:
    # AWS Certificate Manager SSL certificate
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:138978013424:certificate/7b1c00f5-19ee-4e6c-9ca5-b30679eac---
    
    # Health check configuration
    alb.ingress.kubernetes.io/healthcheck-path: /healthz
    alb.ingress.kubernetes.io/healthcheck-port: "8081"
    alb.ingress.kubernetes.io/success-codes: "200"
    
    # Network configuration
    alb.ingress.kubernetes.io/inbound-cidrs: 10.0.0.0/8
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    
    # Security groups and subnets
    alb.ingress.kubernetes.io/security-groups: sg-03a537b10f8b713c3,sg-0faab6bb8700b4164
    alb.ingress.kubernetes.io/subnets: subnet-01ab33de57cfc8101,subnet-0247d97d25e7469f8,subnet-0ebfe41b055f0dec3,subnet-0971e77d71e---
    
    # Tags for resource management
    alb.ingress.kubernetes.io/tags: role=couwatch_mimir
    
    # Ingress class
    kubernetes.io/ingress.class: alb
  hosts:
    - host: mimir-insights.yourdomain.com
      paths:
        # Frontend application
        - path: /
          pathType: Prefix
          service:
            name: mimir-insights-frontend
            port:
              number: 80
        # Backend API
        - path: /api
          pathType: Prefix
          service:
            name: mimir-insights-backend
            port:
              number: 8080
        # Health check endpoint
        - path: /healthz
          pathType: Prefix
          service:
            name: mimir-insights-frontend
            port:
              number: 80
  tls:
    - secretName: mimir-insights-tls
      hosts:
        - mimir-insights.yourdomain.com

rbac:
  enabled: true
  create: true

serviceAccount:
  enabled: true
  create: true
  name: mimir-insights

hpa:
  enabled: true
  backend:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  frontend:
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Monitoring disabled for production
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# LLM features disabled for production
llm:
  enabled: false
  openai:
    enabled: false
  anthropic:
    enabled: false

# Security settings
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true
    allowedPorts:
      - 53
      - 443
      - 80

# Resource quotas
resourceQuota:
  enabled: true
  limits:
    requests.cpu: "1"
    requests.memory: "1Gi"
    limits.cpu: "2"
    limits.memory: "2Gi"

# Priority class
priorityClass:
  enabled: true
  value: 1000
  globalDefault: false
  description: "High priority for MimirInsights pods" 