# ==============================================================================
# High-Memory Frontend Dockerfile for MimirInsights
# Requires Docker with 8GB+ memory allocation
# For 2GB Docker setups, use Dockerfile.frontend.local instead
# ==============================================================================

FROM node:18-alpine

# Install nginx and required packages
RUN apk add --no-cache nginx wget

# Set npm optimizations
ENV NPM_CONFIG_FUND=false \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_PROGRESS=false \
    NPM_CONFIG_LOGLEVEL=error \
    NODE_ENV=production \
    GENERATE_SOURCEMAP=false \
    DISABLE_ESLINT_PLUGIN=true

# Create nginx directories with proper permissions
RUN mkdir -p /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /var/log/nginx \
    /var/run \
    && chmod -R 755 /var/cache/nginx \
    && chmod -R 755 /var/log/nginx \
    && chmod -R 755 /var/run

WORKDIR /app

# Copy package files for dependency caching
COPY web-ui/package*.json ./

# Install dependencies with optimizations
RUN npm ci --prefer-offline --no-audit --no-fund

# Copy source code
COPY web-ui/src ./src
COPY web-ui/public ./public
COPY web-ui/tsconfig.json ./

# Build the application
RUN npm run build

# Copy built app to nginx directory
RUN cp -r build/* /usr/share/nginx/html/

# Copy nginx configuration
COPY web-ui/nginx.conf /etc/nginx/conf.d/default.conf

# Create config directory and ensure it exists
RUN mkdir -p /usr/share/nginx/html/config && \
    chmod 755 /usr/share/nginx/html/config

# Create optimized entrypoint script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'set -e' >> /start.sh && \
    echo '' >> /start.sh && \
    echo 'echo "🚀 Starting MimirInsights Frontend..."' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Ensure config directory exists' >> /start.sh && \
    echo 'mkdir -p /usr/share/nginx/html/config' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Create runtime configuration' >> /start.sh && \
    echo 'cat > /usr/share/nginx/html/config/config.js << EOFCONFIG' >> /start.sh && \
    echo 'window.CONFIG = {' >> /start.sh && \
    echo '  apiBaseUrl: "http://mimir-insights-backend:8080",' >> /start.sh && \
    echo '  environment: "production",' >> /start.sh && \
    echo '  version: "1.0.0",' >> /start.sh && \
    echo '  features: {' >> /start.sh && \
    echo '    autoRefresh: true,' >> /start.sh && \
    echo '    mockData: false' >> /start.sh && \
    echo '  }' >> /start.sh && \
    echo '};' >> /start.sh && \
    echo 'EOFCONFIG' >> /start.sh && \
    echo '' >> /start.sh && \
    echo 'echo "✅ Configuration created"' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Test nginx configuration' >> /start.sh && \
    echo 'nginx -t' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Start nginx' >> /start.sh && \
    echo 'echo "🌐 Starting nginx..."' >> /start.sh && \
    echo 'exec nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

EXPOSE 80

ENTRYPOINT ["/start.sh"] 